{"meta":{"title":"ZhangJY_blog","subtitle":"","description":"","author":"ZhangJY","url":"https://zhangjy1014.github.io","root":"/"},"pages":[{"title":"关于我","date":"2021-10-29T14:20:39.000Z","updated":"2021-10-29T14:30:25.399Z","comments":false,"path":"about/index.html","permalink":"https://zhangjy1014.github.io/about/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-10-29T14:13:29.000Z","updated":"2021-10-29T14:29:07.465Z","comments":true,"path":"tags/index.html","permalink":"https://zhangjy1014.github.io/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-10-29T14:18:39.000Z","updated":"2021-10-29T14:29:58.781Z","comments":true,"path":"categories/index.html","permalink":"https://zhangjy1014.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Ch1_操作系统概述","slug":"Ch1-操作系统概述","date":"2023-03-24T12:41:25.000Z","updated":"2023-03-24T12:45:57.983Z","comments":true,"path":"2023/03/24/Ch1-操作系统概述/","link":"","permalink":"https://zhangjy1014.github.io/2023/03/24/Ch1-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/","excerpt":"","text":"Ch1_操作系统概述 [toc] OS基础知识OS的意义什么是OS：1. 管理系统中的各种软硬件资源 2. 为用户提供良好的界面 操作系统是一种管理计算机系统各种软硬件资源的系统软件，位于硬件层之上，所有其他软件层之下的系统软件，用来进行CPU管理、存储器管理、I/O设备管理、文件管理。 OS的作用功能（4个） CPU管理； 2. 存储器管理； 3. $I/O$设备管理； 4. 文件管理 地位​ 操作系统是配置在计算机硬件上的第一层软件，是对硬件系统的第一次扩充。OS在计算机系统中占据着重要地位，其他软件都依赖于它的支持，是与硬件关系最密切的==系统软件== 为什么要学OSOS相关知识OS历史手工阶段步骤： 将程序和数据记录在打孔纸带上 将程序的纸带放到光电输入机，通过控制台开关启动光电机将程序输入内存 通过控制台启动程序，从第一条指令开始运行 运行结果传输到打印机输出 缺点： 用户在处理作业的整个过程中要独占系统的全部资源 手工操作所需时间长 批处理阶段联机批处理 原理：操作员将若干作业合成为一批，按照卡片顺序依次放到读卡器，监督程序Monitor通过内存将这批作业传输到磁带机（大量作业在磁带机上排队等待处理）。输入完毕后，监督程序开始处理这批作业。自动将第一个作业读入内存，并对其进行编译、链接、执行、输出。处理完第一个处理第二个，如此往复。直到所有都处理完再处理下一批。 优点：作业自动转换，缩短了手工操作时间；出现了Monitor及相关软件的支持 缺点：作业由读卡机到磁带机的传输需要处理机完成,由于设备的传输速度远低于处理机的速度, 在此传输过程中处理机仍会浪费较多时间。即==I/O设备与CPU直接相连==，CPU(主机)浪费。实际上还是处理机利用monitor程序来处理I/O。 脱机批处理 原理：待处理的作业由==卫星机==负责经读卡机传送到输入磁带上，主机从输入磁带读入作业、加以处理，并把处理结果送到输出磁带上，最后由卫星机负责将输出磁带上的结果在打印机上输出。 优点：卫星机与主机分工明确，并行工作； 提高了CPU的运行效率 缺点：单任务系统；需人工拆装磁带 执行系统阶段通道(channel)：$I/O$处理机， 通道的I/O操作能与处理机的计算工作完全并行，并能在I/O操作结束后向处理机发出中断请求 中断(interrupt)：中断是指当主机接到某种外部信号时，马上暂停当前正在执行的任务，转去处理这一中断事件，处理完毕后返回原来的断点继续工作。 假脱机(spooling)：作业由读卡机到存储区的传输以及运行结果由存储区到打印机的传输由通道完成，既不是脱机，也不是联机（也不依靠卫星机）。假脱机优点：通道替代卫星机，免去手工装卸磁带的麻烦。 OS完善多道批处理阶段(Multi-programming System)原理：多道作业。用户提交的作业都先放在外存上并排成一个后备队列，然后由作业调度程序按一定的算法从后备队列中选择若干个作业调入内存。当一道作业因等待I/O传输完成等原因暂时不能运行时，系统可将CPU资源分配给另一个可运行的作业。 本质上是将若干个程序调入到内存，使他们交替执行，CPU就始终处于忙状态。 宏观上并行：多个作业调入内存，同时占有资源各自运行微观上串行：轮流占有处理机，交替执行 优点：资源利用率高，吞吐量大缺点：平均周转时间长，缺乏交互能力 分时系统(Time-sharing System)原理：在一台主机上连接多个显示器和键盘的终端，允许多个用户共享主机资源，以终端方式使用主机，每个用户都像是独占这台主机。 多路性：一个主机与多个终端相连，系统按分时原则为每个用户服务。宏观上，多个用户同时工作,共享系统资源；微观上，每个用户轮流运行一个时间片。 交互性：以对话的方式为用户服务 独占性：每个终端用户仿佛都拥有一台虚拟机 实时系统(Real-time System)实时系统是指系统能即时响应外部事件的请求，在规定时间内完成对事件的处理，并控制所有实时任务协调一致地运行。它分为实时信息处理系统和实时控制系统两大类。 通用系统将多道批处理、分时和实时等功能结合在一起构造出的多功能的操作系统。 操作系统基本特性（4个）程序的并发性程序的并发指计算机系统同时存在多个程序，宏观上，这些程序同时向前推进。 并发：宏观上同时，微观上轮流交替并行：微观上同时，需要多个处理器 并发是计算机系统的重要特征，其他特征都是以并发为前提。 资源的共享性操作系统程序与用户程序共用系统中的各种资源，这种共享是在操作系统的控制下实现的 互斥共享：系统中有一些资源，当一个进程正在访问该资源时，其他进程必须等待，直到该进程访问完并释放这些资源时，其他进程才能访问这些资源。这就是互斥共享，互斥共享的资源叫临界资源。如：打印机等物理设备或者表格就是临界资源，它们要求互斥共享。（不能同时） 同时共享：系统中有一类资源，允许在一段时间内，由多个进程同时对其访问。这就是同时共享，本质还是宏观上时同时，微观上是交替分时的。如，磁盘，同时可以多个进程访问磁盘。 异步性不确定性。程序交替执行需要中断，中断是不确定的，所以操作系统中的运行轨迹是异步的，不可预知的。比如先进入内存的作业可能比后进入的后完成。 虚拟性把物理上的一个变成逻辑上的多个。（分时、分空间） 操作系统的分类多道批处理操作系统 作业（Job）：用户程序，数据，程序说明书 输入井：用来保存已经输入、尚未处理的作业。外存 输出井：用来保存处理完毕、尚未输出的结果。外存 结果：程序运行结果+记账信息 分时操作系统 实时操作系统实时控制、实时信息处理 。。。。 硬件环境（8大） 时钟装置： 绝对时钟：记载实际时间、不断发生 间隔时钟（闹钟）：定期发生中断 系统栈： 内存中操作系统空间中的一个固定区域。 作用：保存中断现场、保存子程序间相互嵌套调用的信息（中间参数）。 *每个运行程序都有一个对应系统栈；进程切换伴随系统栈切换 特权指令和非特权指令。 特权指令：只有在管态下才能执行的指令非特权指令：管态和目态均可执行的指令 处理机状态管态：操作系统运行时所处的状态。处于管态时可以执行硬件提供的全部指令（特权指令、非特权指令）。在管态下可通过执行特权指令修改程序状态字PSW，改变机器状态，实现管态与目态切换。目态：一般用户程序运行时所处的状态。只能执行非特权指令 管态=》目态 通过==修改程序状态字==(PSW)来实现。由于操作系统运行于管态，用户程序运行于目态，该状态转换必包括从操作系统程序切换到用户程序。目态=》管态 唯一途径：==中断== 用户程序在目态下运行时不能直接使用I/O指令等特权指令。只有当用户程序执行到==访管指令==产生一次中断后，使机器在原来的目态下执行用户程序变成在管态下执行操作系统的系统调用程序。所以从目态转换成管态的唯一途径是中断。 地址映射机构：将逻辑地址变为物理地址 存储保护设施：进行地址越界和越权检查，防止应用程序侵犯操作系统空间或其他应用空间 中断装置：发现中断、响应中断 通道与DMA控制器： 通道：负责I/O处理，有自己的指令系统和运控部件 DMA(Direct Memory Access):数据在内存与块型设备的简单传输 界面形式 交互终端命令（图形用户界面） 作用控制语言 系统调用命令 运行机理现代OS是中断驱动的 中断是程序切换的必要条件&lt;程序切换必有中断&gt;","categories":[{"name":"OS","slug":"OS","permalink":"https://zhangjy1014.github.io/categories/OS/"}],"tags":[{"name":"Computer Science","slug":"Computer-Science","permalink":"https://zhangjy1014.github.io/tags/Computer-Science/"}]},{"title":"基于距离向量算法的路由协议RIP","slug":"RIP-Route","date":"2022-01-15T08:42:27.000Z","updated":"2022-01-19T08:10:07.478Z","comments":true,"path":"2022/01/15/RIP-Route/","link":"","permalink":"https://zhangjy1014.github.io/2022/01/15/RIP-Route/","excerpt":"","text":"一、实验目的理解基于距离向量算法的路由协议 RIP。 二、实验内容和要求1、用 Cisco Packet Tracer 研究 RIP； 2、支持多个路由器； 3、学习使用 Cisco Packet Tracer 的 Simulation 模式，通过捕获的数据分析 RIP 报文格式，并在实验报告体现； 三、实验过程3.1建立网络拓扑结构在Packet Tracer中，建立如图所示的网络拓扑结构: 3.2配置参数3.2.1 PC配置PC0的配置： PC1的配置： 3.2.2 Route IP、RIP配置Route A配置： Route B配置： Route C配置： Route D配置： Route E配置： 3.3测试网络3.3.1连通性测试PC0、PC1分别使用ping命令，可见网络是连通的。 3.3.2使用Simulation模式查看网络及报文 对报文进行分析 Layer1 是物理层，表示Route从GigabitEthernet0/1收到数据。 Layer2 是数据链路层，表示其MAC地址。 Layer3 是网络层，表示源地址和目的地址。 Layer4 是传输层，表示报文交接的端口。 Layer7 是应用层，表示协议及版本。 报文具体格式： Route A路由表： Route B路由表： Route C路由表： Route D路由表： Route E路由表： 由此可见所有路由器都学到了网络的跳转路径。 附：Cisco Packet Tracer实验文件","categories":[{"name":"Computer Science","slug":"Computer-Science","permalink":"https://zhangjy1014.github.io/categories/Computer-Science/"}],"tags":[{"name":"Computer Networks","slug":"Computer-Networks","permalink":"https://zhangjy1014.github.io/tags/Computer-Networks/"}]},{"title":"博客系统面向对象设计文档","slug":"blog-object-oriented-design","date":"2021-11-01T08:07:25.000Z","updated":"2022-03-01T08:13:28.533Z","comments":true,"path":"2021/11/01/blog-object-oriented-design/","link":"","permalink":"https://zhangjy1014.github.io/2021/11/01/blog-object-oriented-design/","excerpt":"","text":"博客系统面向对象设计文档","categories":[{"name":"Software Engineering","slug":"Software-Engineering","permalink":"https://zhangjy1014.github.io/categories/Software-Engineering/"}],"tags":[{"name":"Software design","slug":"Software-design","permalink":"https://zhangjy1014.github.io/tags/Software-design/"}]},{"title":"博客系统结构化设计文档","slug":"blog-structured-design","date":"2021-11-01T07:50:29.000Z","updated":"2022-03-01T08:12:00.246Z","comments":true,"path":"2021/11/01/blog-structured-design/","link":"","permalink":"https://zhangjy1014.github.io/2021/11/01/blog-structured-design/","excerpt":"","text":"博客系统结构化设计文档","categories":[{"name":"Software Engineering","slug":"Software-Engineering","permalink":"https://zhangjy1014.github.io/categories/Software-Engineering/"}],"tags":[{"name":"Software design","slug":"Software-design","permalink":"https://zhangjy1014.github.io/tags/Software-design/"}]},{"title":"博客系统结构化需求分析文档","slug":"blog-structured-analysis","date":"2021-11-01T07:33:12.000Z","updated":"2022-03-01T08:11:18.419Z","comments":true,"path":"2021/11/01/blog-structured-analysis/","link":"","permalink":"https://zhangjy1014.github.io/2021/11/01/blog-structured-analysis/","excerpt":"","text":"博客系统结构化需求分析文档","categories":[{"name":"Software Engineering","slug":"Software-Engineering","permalink":"https://zhangjy1014.github.io/categories/Software-Engineering/"}],"tags":[{"name":"Software analysis","slug":"Software-analysis","permalink":"https://zhangjy1014.github.io/tags/Software-analysis/"}]},{"title":"建站notation","slug":"notation","date":"2021-10-30T12:38:57.000Z","updated":"2022-01-15T08:50:41.160Z","comments":true,"path":"2021/10/30/notation/","link":"","permalink":"https://zhangjy1014.github.io/2021/10/30/notation/","excerpt":"","text":"参考文档：1. https://dhndzwxj-3ghxc51j1010c2ed-1302940033.tcloudbaseapp.com/3276806131.html 参考视频：https://www.bilibili.com/video/BV1Yb411a7ty valine评论框架：https://valine.js.org 评论管理工具：https://console.leancloud.cn/apps/K6CcYTognPssARuNej3sBRGI-gzGzoHsz/storage/data/Comment 上传部署： 1hexo cl &amp;&amp; hexo g &amp;&amp; hexo d 命令顺序：","categories":[{"name":"blog","slug":"blog","permalink":"https://zhangjy1014.github.io/categories/blog/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://zhangjy1014.github.io/tags/hexo/"}]},{"title":"Hexo官方文档","slug":"hello-world","date":"2021-10-28T09:15:38.920Z","updated":"2021-10-30T12:00:39.950Z","comments":true,"path":"2021/10/28/hello-world/","link":"","permalink":"https://zhangjy1014.github.io/2021/10/28/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"blog","slug":"blog","permalink":"https://zhangjy1014.github.io/categories/blog/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://zhangjy1014.github.io/tags/hexo/"}]}],"categories":[{"name":"OS","slug":"OS","permalink":"https://zhangjy1014.github.io/categories/OS/"},{"name":"Computer Science","slug":"Computer-Science","permalink":"https://zhangjy1014.github.io/categories/Computer-Science/"},{"name":"Software Engineering","slug":"Software-Engineering","permalink":"https://zhangjy1014.github.io/categories/Software-Engineering/"},{"name":"blog","slug":"blog","permalink":"https://zhangjy1014.github.io/categories/blog/"}],"tags":[{"name":"Computer Science","slug":"Computer-Science","permalink":"https://zhangjy1014.github.io/tags/Computer-Science/"},{"name":"Computer Networks","slug":"Computer-Networks","permalink":"https://zhangjy1014.github.io/tags/Computer-Networks/"},{"name":"Software design","slug":"Software-design","permalink":"https://zhangjy1014.github.io/tags/Software-design/"},{"name":"Software analysis","slug":"Software-analysis","permalink":"https://zhangjy1014.github.io/tags/Software-analysis/"},{"name":"hexo","slug":"hexo","permalink":"https://zhangjy1014.github.io/tags/hexo/"}]}